set nocompatible	"disable backwards-compatible with vi
filetype off

source $VIMRUNTIME/vimrc_example.vim
source $VIMRUNTIME/mswin.vim
behave mswin

if has('win32') || has ('win64')
	let $VIMFILES = '""' . $VIM . '\vimfiles"'
else
	let $VIMFILES = $HOME."/.vim"
endif

set diffexpr=MyDiff()
function MyDiff()
  let opt = '-a --binary '
  if &diffopt =~ 'icase' | let opt = opt . '-i ' | endif
  if &diffopt =~ 'iwhite' | let opt = opt . '-b ' | endif
  let arg1 = v:fname_in
  if arg1 =~ ' ' | let arg1 = '"' . arg1 . '"' | endif
  let arg2 = v:fname_new
  if arg2 =~ ' ' | let arg2 = '"' . arg2 . '"' | endif
  let arg3 = v:fname_out
  if arg3 =~ ' ' | let arg3 = '"' . arg3 . '"' | endif
  let eq = ''
  if $VIMRUNTIME =~ ' '
    if &sh =~ '\<cmd'
      let cmd = '""' . $VIMRUNTIME . '\diff"'
      let eq = '"'
    else
      let cmd = substitute($VIMRUNTIME, ' ', '" ', '') . '\diff"'
    endif
  else
    let cmd = $VIMRUNTIME . '\diff'
  endif
  silent execute '!' . cmd . ' ' . opt . arg1 . ' ' . arg2 . ' > ' . arg3 . eq
endfunction

set backup            " make backup files
set backupdir=C:\Temp " where to put backup files
set noswapfile        " no swap files
set undofile          " make undo files
set undodir=C:\Temp

set ignorecase    " ignore case when searching
set smartcase     " ignore case if search pattern is all lowercase, case-sensitive otherwise

set smarttab      " insert tabs on the start of a line according to shiftwidth, not tabstop

set backspace=indent,eol,start        " allow backspacing over everything in insert mode
set autoindent    " always set autoindenting on
set copyindent    " copy the previous indentation on autoindenting
set gdefault      " applies substitutions globally on lines 
set showmatch     " set show matching parenthesis
set incsearch     " show search matches as you type
set visualbell    " Silence the bell, use a flash instead
set showcmd       " Show (partial) command in status line
set showmode
set wildmenu
set wildmode=list:longest,full


" Handle long lines
set wrap " don't wrap lines
map <F2> <Esc>:set nowrap<CR>
map <S-F2> <Esc>:set wrap<CR>
"nnoremap j gj
"nnoremap k gk
"This makes gj/gk move by virtual lines when used without a count, and by physical lines when used with a count.
noremap <silent> <expr> j (v:count == 0 ? 'gj' : 'j')
noremap <silent> <expr> k (v:count == 0 ? 'gk' : 'k')

colorscheme xoria256

"set colorcolumn=85	"show a colored column at 85 characters (so I can see when I write a too-long line of code)
set pastetoggle=<F5>	"Vim will switch to paste mode, disabling all kinds of smartness and just pasting a whole buffer of text. When in paste-mode auto indent will be turned off.

set paste

set cursorline cursorcolumn
highlight Cursor guifg=white guibg=#1874cd
highlight iCursor guifg=white guibg=#1874cd

" set the menu & the message to English
set langmenu=en_US
let $LANG = 'en_US'
source $VIMRUNTIME/delmenu.vim
source $VIMRUNTIME/menu.vim

"" Contents of the ToolBar {{{
" Do not install the ToolBar if it is already done.
"if !exists("did_install_custom_toolbar")
"    let did_install_custom_toolbar = 1

    "" Buttons and icons {{{
    amenu 1.10 ToolBar.New :new<CR>
    amenu 1.20 ToolBar.Open :browse confirm e<CR>
"    an <silent> icon=~/.gvim/bitmaps/16/document-save.png 1.30 ToolBar.Save :if expand("%") == ""<Bar>browse confirm w<Bar>else<Bar>confirm w<Bar>endif<CR>
"    an icon=~/.gvim/bitmaps/16/system-floppy.png 1.40 ToolBar.SaveAll :browse confirm wa<cr>

"    an 1.45 ToolBar.-sep1- <Nop>

"    an icon=$VIMFILES/bitmaps/16/edit-undo.png 1.50 ToolBar.Undo u
"    an icon=$VIMFILES/bitmaps/16/edit-redo.png 1.60 ToolBar.Redo <C-R>

"    an 1.65 ToolBar.-sep2- <Nop>

"    vnoremenu icon=~/.gvim/bitmaps/16/edit-cut.png 1.70 ToolBar.Cut "+x
"    vnoremenu icon=~/.gvim/bitmaps/16/edit-copy.png 1.80 ToolBar.Copy "+y
"    cnoremenu icon=~/.gvim/bitmaps/16/edit-copy.png 1.80 ToolBar.Copy <C-Y>
"    nnoremenu icon=~/.gvim/bitmaps/16/edit-paste.png 1.90 ToolBar.Paste "+gP
"    cnoremenu icon=~/.gvim/bitmaps/16/edit-paste.png ToolBar.Paste <C-R>+
"    exe 'vnoremenu <script> ToolBar.Paste ' . paste#paste_cmd['v']
"    exe 'inoremenu <script> ToolBar.Paste ' . paste#paste_cmd['i']

	aunmenu ToolBar.-sep6-
	aunmenu ToolBar.Make
	aunmenu ToolBar.RunCtags
	aunmenu ToolBar.TagJump

	an 1.400 ToolBar.-sep8- <Nop>
	"an icon=~/.gvim/bitmaps/16/preferences-system-windows.png 1.300 ToolBar.MiniBufExplorer :TMiniBufExplorer<CR>
	an icon=WinMax 1.410 ToolBar.Maximize <C-w>_
	an icon=WinVSplit 1.420 ToolBar.ResizeEqual <C-w>=

"an icon=~/.gvim/bitmaps/16/stock_spellcheck.png 1.130 ToolBar.Syntastic :SyntasticCheck<CR>
    "an icon=~/.gvim/bitmaps/16/document-revert.png 1.140 ToolBar.Alternate :A<CR>

    "an 1.195 ToolBar.-sep4- <Nop>

    "an icon=~/.gvim/bitmaps/16/accessories-dictionary.png 1.200 ToolBar.Tagbar :TagbarToggle<CR>
    "if version >= 703
    "    an 1.210 ToolBar.Undotree :UndotreeToggle<CR>
    "endif
    "an icon=~/.gvim/bitmaps/16/system-file-manager.png 1.220 ToolBar.FileExplorer :NERDTreeToggle<CR>

    "an 1.395 ToolBar.-sep6- <Nop>
    "if version >= 703
    "    an icon=~/.gvim/bitmaps/16/applications-engineering.png 1.400 ToolBar.Numbers :NumbersToggle<CR>
    "endif
    "nmenu icon=~/.gvim/bitmaps/16/format-text-direction-ltr.png 1.410 ToolBar.Comment gcc
    "vmenu icon=~/.gvim/bitmaps/16/format-text-direction-ltr.png 1.410 ToolBar.Comment gc
    "imenu icon=~/.gvim/bitmaps/16/format-text-direction-ltr.png 1.410 ToolBar.Comment <C-O>gcc
    "nmenu icon=~/.gvim/bitmaps/16/format-indent-more.png 1.420 ToolBar.IndentMore >>
    "vmenu icon=~/.gvim/bitmaps/16/format-indent-more.png 1.420 ToolBar.IndentMore >
    "imenu icon=~/.gvim/bitmaps/16/format-indent-more.png 1.420 ToolBar.IndentMore <C-O>>>
    "nmenu icon=~/.gvim/bitmaps/16/format-indent-less.png 1.430 ToolBar.IndentLess <<
    "vmenu icon=~/.gvim/bitmaps/16/format-indent-less.png 1.430 ToolBar.IndentLess <
    "imenu icon=~/.gvim/bitmaps/16/format-indent-less.png 1.430 ToolBar.IndentLess <C-O><<

    "if !has("gui_athena")
    "    an 1.895 ToolBar.-sep7- <Nop>

"        an icon=~/.gvim/bitmaps/16/edit-find-replace.png 1.900 ToolBar.Replace :promptrepl<CR>
"        vunmenu ToolBar.Replace
"        vnoremenu icon=~/.gvim/bitmaps/16/edit-find-replace.png ToolBar.Replace y:promptrepl <C-R>=<SID>FixFText()<CR><CR>
"        an icon=~/.gvim/bitmaps/16/go-next.png 1.910 ToolBar.FindNext n
"        an icon=~/.gvim/bitmaps/16/go-previous.png 1.920 ToolBar.FindPrev N
"    endif
    "}}}

    "" ToolTips {{{
    tmenu 1.10 ToolBar.New New
    tmenu 1.20 ToolBar.Open Open
    tmenu 1.30 ToolBar.Save Save
    tmenu 1.40 ToolBar.SaveAll Save All
    tmenu 1.50 ToolBar.Print Print
    tmenu 1.60 ToolBar.Undo Undo
    tmenu 1.70 ToolBar.Redo Redo
    tmenu 1.80 ToolBar.Cut Cut
    tmenu 1.90 ToolBar.Copy Copy
    tmenu 1.100 ToolBar.Paste Paste
    tmenu ToolBar.RunScript Run Script
    tmenu ToolBar.Help Help
    tmenu ToolBar.FindHelp Find Help

    "tmenu 1.200 ToolBar.Tagbar Afficher les tags
    "if version >= 703
    "    tmenu 1.210 ToolBar.Undotree Afficher l'historique d'édition
    "endif

    "tmenu 1.300 ToolBar.MiniBufExplorer Afficher le mini explorateur de tampons
    tmenu 1.310 ToolBar.Maximize Maximize Buffer
    tmenu 1.320 ToolBar.ResizeEqual Resize Equal Buffer

    if version >= 703
        tmenu 1.400 ToolBar.Numbers Alterner entre affichage classique et relatif des numéros de lignes
    endif
    tmenu 1.410 ToolBar.Comment Commenter
    tmenu 1.420 ToolBar.IndentMore Indenter
    tmenu 1.430 ToolBar.IndentLess Désindenter

    if !has("gui_athena")
        tmenu 1.900 ToolBar.Replace Replace
        tmenu 1.910 ToolBar.FindNext Find Nex
        tmenu 1.920 ToolBar.FindPrev Find Previous
    endif
    "}}}
"endif
"}}}

set fileencoding=utf-8
set encoding=utf-8
set tenc=utf-8
set fileencodings=ucs-bom,utf-8,cp936,gb18030,big5,euc-jp,euc-kr,latin1
language message en_US.UTF-8

set number
set relativenumber
hi CursorLineNr guifg=silver

set ruler
set guioptions+=b
"set guioptions-=T
nnoremap <C-F1> :if &go=~#'m'<Bar>set go-=m<Bar>else<Bar>set go+=m<Bar>endif<CR>
nnoremap <C-F2> :if &go=~#'T'<Bar>set go-=T<Bar>else<Bar>set go+=T<Bar>endif<CR>
nnoremap <C-F3> :if &go=~#'r'<Bar>set go-=r<Bar>else<Bar>set go+=r<Bar>endif<CR>

filetype plugin on

if has("autocmd") && exists("+omnifunc")
autocmd Filetype *
\ if &omnifunc == "" |
\ setlocal omnifunc=syntaxcomplete#Complete |
\ endif
endif

" statusline
set laststatus=2 "enable status line always
set statusline=%2*%n%m%r%h%w%*\ %F\ %1*[FORMAT=%2*%{&ff}:%{&fenc!=''?&fenc:&enc}%1*]\ [TYPE=%2*%Y%1*]\ [COL=%2*%03v%1*]\ [ROW=%2*%03l%1*/%3*%L(%p%%)%1*]\    
"set statusline=%F%m%r%h%w\ [FORMAT=%{&ff}]\ [TYPE=%Y]\ [ASCII=\%03.3b]\ [HEX=\%02.2B]\ [POS=%04l,%04v][%p%%]\ [LEN=%L]

function! InsertStatuslineColor(mode)
  if a:mode == 'i'
    hi statusline guibg=peru
  elseif a:mode == 'r'
    hi statusline guibg=blue
  else
    hi statusline guibg=black
  endif
endfunction

au InsertEnter * call InsertStatuslineColor(v:insertmode)
au InsertLeave * hi statusline guibg=orange guifg=white
hi statusline guibg=black "default the statusline to green when entering Vim

hi User1 guifg=gray
hi User2 guifg=red
hi User3 guifg=white
"hi User5 guibg=#C2BFA5 guifg=#666666 

" Font 设置字体。
" 如果字体名称中含有空格，
" 需要在空格前面加上一个反斜杠，如下：
" 这是 Linux 风格的字体设置语法
"set guifont=Bitstream\ Vera\ Sans\ Mono\ 9
" 这是 Windows 风格的字体设置语法
"set guifont=Bitstream_Vera_Sans_Mono:h9:cANSI
if has("gui_win32")
    :set guifont=Consolas:h11,Courier\ New:h11:cANSI
endif

:set nospell

" Maps
"nmap <tab> V>
"nmap <s-tab> V<
"vmap <tab> >gv
"vmap <s-tab> <gv
" Stay in visual mode when indenting. 
vnoremap < <gv
vnoremap > >gv

" 显示/禁止行列光标
nmap <silent> <F6> <Esc>:call ToggleCursor()<CR>

" Determining the highlight group that the word under the cursor belongs to
nmap <silent> <F7>   :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<' . synIDattr(synID(line("."),col("."),0),"name") . "> lo<" . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"<CR>
map <F10> <Esc>:tabnew<CR>

function! ToggleCursor()
     if &cursorcolumn
          set nocursorline nocursorcolumn
     else
          set cursorline cursorcolumn
     endif
endfunction

" clear highlighted searches
nmap <silent> ,/ :nohlsearch<CR>
"
function ToggleHLSearch() 
	if &hls
		set nohls 
	else
		set hls 
	endif 
endfunction

" let mapleader=";" "Default \
nmap <silent> <leader><space> <Esc>:call ToggleHLSearch()<CR>
inoremap <leader>\ <C-x><C-o>

" Quickly edit/reload the vimrc file
nmap <silent> <leader>ev :e $MYVIMRC<CR>
nmap <silent> <leader>sv :so $MYVIMRC<CR>
autocmd BufWritePost $MYVIMRC source $MYVIMRC


" Abbreviations
abbreviate #b /**********************
abbreviate #e **********************/
iabbrev pcode <p style="text-indent:2em"><code class="inset"></code></p>
iabbrev icode <code class="inset">!cursor!</code><Esc>:call search('!cursor!','b')<cr>cf!
"cabbrev h tab h

" Template
autocmd! BufNewFile * silent! 0r $VIM/vimfiles/skel/Template.%:e

" Fold
set foldmethod=marker
set foldcolumn=0

" Show invisible characters
set list
set listchars=tab:\|.,trail:,nbsp:.,extends:⇔
" Enter the middle-dot by pressing Ctrl-k then .M
" Enter the right-angle-quote by pressing Ctrl-k then >>
" Enter the Pilcrow mark by pressing Ctrl-k then PI
" The command :dig displays other digraphs you can use.

set history=1000 " remember more commands and<LeftMouse> search history
set undolevels=1000 " use many muchos levels of undo

"au FocusLost * :wa	"save on losing focus


":au Filetype html,xml,xsl source $VIM/vimfile/plugin/closetag.vim

" visually select text then press ~ to convert the text to  UPPER CASE, 
" then to lower case, then to Title Case.
function! TwiddleCase(str)
  if a:str ==# toupper(a:str)
    let result = tolower(a:str)
  elseif a:str ==# tolower(a:str)
    let result = substitute(a:str,'\(\<\w\+\>\)', '\u\1', 'g')
  else
    let result = toupper(a:str)
  endif
  return result
endfunction
vnoremap ~ y:call setreg('', TwiddleCase(@"), getregtype(''))<CR>gv""Pgvl


" Vundle
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" set the runtime path to include Vundle and initialize
set rtp+=$VIM/vimfiles/bundle/Vundle.vim/
call vundle#begin('$VIM/vimfiles/bundle/')
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

" The following are examples of different formats supported.
" Keep Plugin commands between vundle#begin/end.
" plugin on GitHub repo
"Plugin 'mattn/emmet-vim'
Plugin 'lilydjwg/colorizer'
Plugin 'kshenoy/vim-signature'
Plugin 'landonb/dubs_html_entities'
Plugin 'MarcWeber/vim-addon-mw-utils'
Plugin 'tomtom/tlib_vim'
Plugin 'garbas/vim-snipmate'
Plugin 'honza/vim-snippets'
Plugin 'yyq123/HTML-Editor'
" plugin from http://vim-scripts.org/vim/scripts.html
"Plugin 'L9'
" Git plugin not hosted on GitHub
"Plugin 'https://github.com/wincent/command-t.git'
" git repos on your local machine (i.e. when working on your own plugin)
"Plugin 'file:///home/gmarik/path/to/plugin'
" The sparkup vim script is in a subdirectory of this repo called vim.
" Pass the path to set the runtimepath properly.
"Plugin 'rstacruz/sparkup', {'rtp': 'vim/'}
" Install L9 and avoid a Naming conflict if you've already installed a
" different version somewhere else.
"Plugin 'ascenator/L9', {'name': 'newL9'}

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line


" vim-signature 配置
hi SignColumn guibg=NONE
hi SignColumn ctermbg=NONE
hi SignatureMarkText ctermbg=NONE

" vim-sinpmate 配置 
" Alt+Space
imap <M-space> <Plug>snipMateNextOrTrigger
smap <M-space> <Plug>snipMateNextOrTrigger
xmap <M-space> <Plug>snipMateVisual
